{"version":3,"mappings":"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","names":["arguments","dirtyAmount","dirtyDate","amount","date","_angular_core__WEBPACK_IMPORTED_MODULE_0__","ctx_r0","ctx_r1","ctx_r2","HOLIDAY_API_KEY","COUNTRY_CODE","DemoComponent","http","cdr","angular_calendar__WEBPACK_IMPORTED_MODULE_1__","Date","fetchHolidays","get","params","country","year","String","getFullYear","key","subscribe","holidays","events","map","holiday","start","title","name","allDay","meta","type","markForCheck","selectors","decls","vars","consts","template","ctx","DemoModule","_angular_common__WEBPACK_IMPORTED_MODULE_1__","angular_calendar__WEBPACK_IMPORTED_MODULE_2__","provide","angular_calendar__WEBPACK_IMPORTED_MODULE_3__","useFactory","angular_calendar_date_adapters_date_fns__WEBPACK_IMPORTED_MODULE_4__","_angular_common_http__WEBPACK_IMPORTED_MODULE_5__","_demo_utils_module__WEBPACK_IMPORTED_MODULE_6__","_angular_router__WEBPACK_IMPORTED_MODULE_7__","path","component","_component__WEBPACK_IMPORTED_MODULE_8__","declarations","imports","exports"],"sources":["webpack:///node_modules/date-fns/esm/addYears/index.js","webpack:///node_modules/date-fns/esm/startOfYear/index.js","webpack:///node_modules/date-fns/esm/subYears/index.js","webpack:///projects/demos/app/demo-modules/public-holidays/template.html","webpack:///projects/demos/app/demo-modules/public-holidays/component.ts","webpack:///projects/demos/app/demo-modules/public-holidays/module.ts"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addYears from \"../addYears/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { HttpClient } from '@angular/common/http';\nimport { startOfYear, subYears } from 'date-fns';\n\n// get your own key from https://holidayapi.com/\nconst HOLIDAY_API_KEY = '8eb2582d-3a4c-4fc5-94c8-3e21487d4e23';\n\n// change this to your own country\nconst COUNTRY_CODE = 'US';\n\ninterface Holiday {\n  date: string;\n  name: string;\n}\n\ntype CalendarEventWithMeta = CalendarEvent<\n  { type: 'holiday'; holiday: Holiday } | { type: 'normal' }\n>;\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent implements OnInit {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = startOfYear(subYears(new Date(), 1));\n\n  events: CalendarEventWithMeta[] = [];\n\n  constructor(private http: HttpClient, private cdr: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.fetchHolidays();\n  }\n\n  private fetchHolidays() {\n    this.http\n      .get<{ holidays: Holiday[] }>('https://holidayapi.com/v1/holidays', {\n        params: {\n          country: COUNTRY_CODE,\n          year: String(new Date().getFullYear() - 1),\n          key: HOLIDAY_API_KEY,\n        },\n      })\n      .subscribe(({ holidays }) => {\n        this.events = holidays.map((holiday) => {\n          return {\n            start: new Date(holiday.date),\n            title: holiday.name,\n            allDay: true,\n            meta: {\n              type: 'holiday',\n              holiday,\n            },\n          };\n        });\n        this.cdr.markForCheck();\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { DemoUtilsModule } from '../demo-utils/module';\nimport { DemoComponent } from './component';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    HttpClientModule,\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent],\n  exports: [DemoComponent],\n})\nexport class DemoModule {}\n"]}