{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAe;AACf;AACA;;AAEA;AACAA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACAC,gBADA;AAEAC,gBAFA;AAGAC,4BAHA;AAIAC,oBAJA;AAKAC,0BALA;AAMAC,8BANA;AAOAC,0BAPA;AAQAC;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAC;AADA;AAGA;;AAEA;AACA;AACAA;AADA;AAGA;;AAEA;AACA;AACA;AACAA;AADA;AAlBA;AAsBG,SA3BH;AA4BA;AACAC;AACA;AACA;AACA,mDADA,CAC8C;;AAE9C;AACA;AACAC;AADA;AAGA;;AAEA,iBAAWC,oEAAiBC,IAAjB,EAAiBC,KAAjB,CAAX;AACG,SAzCH;AA0CA;AACAC;AACA,+BAAyB,0EAAcF,IAAd,EAAcG,OAAd,CAAzB,CADA,CACwD;;AAExD,kFAHA,CAG6E;;AAE7E;AACA;AACA,mBAAa,uEAAeC,YAAf,EAAe,CAAf,CAAb;AACA,WARA,CAQM;;;AAGN;AACA;AACAN;AADA;AAGA,WAfA,CAeM;;;AAGN,iBAAW,uEAAeO,QAAf,EAAeJ,YAAf,CAAX;AACG,SA9DH;AA+DA;AACAK;AACA,4BAAsB,6EAAiBN,IAAjB,CAAtB,CADA,CAC+C;;AAE/C,iBAAW,uEAAeO,WAAf,EAAeN,YAAf,CAAX;AACG,SApEH;AAqEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAO;AACA;AACA,iBAAW,uEAAeC,IAAf,EAAeR,YAAf,CAAX;AACG,SAjFH;AAkFA;AACAS;AACA;;AAEA;AACA;AACA;AACA;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AAewC,KAAf,EAAerC,YAAf,CAAX;AACG,SA9mBH;AA+mBA;AACAsC;AACA;AACA;;AAEA;AACA;AACAzC;AADA;AAGA;;AAEA,iBAAW,uEAAewC,KAAf,EAAerC,YAAf,CAAX;AACG,SA3nBH;AA4nBA;AACAuC;AACA;AACA;AACA1C;AADA;AAGA;;AAEA,iBAAWC,oEAAiBC,IAAjB,EAAiBC,KAAjB,CAAX;AACG,SAroBH;AAsoBA;AACAwC;AACA;AACA;AACA3C;AADA;AAGA;;AAEA,iBAAWC,oEAAiBC,IAAjB,EAAiBC,KAAjB,CAAX;AACG,SA/oBH;AAgpBA;AACAyC;AACA,iBAAW3C,oEAAiBC,IAAjB,EAAiBC,KAAjB,CAAX;AACG,SAnpBH;AAopBA;AACA0C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAjBA,CAiBA;;AAEA;AACA;AApBA;AAsBG,SAnrBH;AAorBA;AACAC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAjBA,CAiBA;;AAEA;AACA;AApBA;AAsBG,SA/sBH;AAgtBA;AACAC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAVA;AAYG,SAjuBH;AAkuBA;AACAC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAVA;AAYG,SAnvBH;AAovBA;AACAC;AACA;AACA;AACA,iBAAW,uEAAeC,SAAf,EAAe/C,YAAf,CAAX;AACG,SAzvBH;AA0vBA;AACAgD;AACA;AACA;AACA,iBAAW,uEAAeD,SAAf,EAAe/C,YAAf,CAAX;AACA;AA/vBA;;AAkwBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kDAA4C,uEAAeiD,OAAf,EAAe,CAAf,CAA5C;AACA;;AAEA;AACA;AACA;AACA,wBAAkB,uEAAeC,qBAAf,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AAmBC,cAAnB,EAAmB1B,SAAnB;AACR;;AAEA,yDAAmD,0FAAyByB,SAAzB,CAAnD,EAA4E;AACpE,kGAAmBA,SAAnB,EAAmBC,cAAnB,EAAmB1B,SAAnB;AACR;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACG,SAxCH,EAwCGoB,IAxCH,CAwCG,EAxCH;AAyCA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe;AACb,gFAAY,CAAZ,EAAYrB,SAAZ;AACF,mBAAa,8DAAMC,SAAN,CAAb;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AChEe;AACf;AACA,+FADA,CAEA;;AACA;AACA;AACA;AACA,SANA;AAOA;;;;;;;;;;;;;;;;;;;;;;;ACRe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA2B;AACA,WAJA,MAIM;AACN;;AAEA;;AAEAA;AACA;;AAEA,6FAjBA,CAiBwF;;AAExF;AACA,SApBA;AAqBA;;;;;;;;;;;;;;;;;;;;;;;ACtBe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACK,WAFL,IAEKC;AACL;AACK,WAFA,CAFL;AAKA;AACAC;AACAA;AACA;AACA;AACAA,wBADA;AAEAC;AAFA;AAIA,SAzBA;AA0BA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0BAAoBC,kBAApB,EAAwCA,KAAxC,EAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC/Ce;AACf;AACA;AACA;A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","names":["output","am","pm","midnight","noon","morning","afternoon","evening","night","G","width","y","unit","_lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__","date","token","Y","options","twoDigitYear","weekYear","R","isoWeekYear","u","year","Q","quarter","context","q","M","L","month","w","week","I","isoWeek","d","D","dayOfYear","E","e","localDayOfWeek","c","i","isoDayOfWeek","a","toLowerCase","b","dayPeriodEnumValue","B","h","H","K","hours","k","m","s","S","X","x","O","z","t","timestamp","T","minutes","Math","absOffset","__webpack_exports__","formatters","fractionalSeconds","dateTimeFormat","dateLongFormatter","replace","timeLongFormatter","p","P","longFormatters","arguments","dirtyDate","getTime","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","dirtyOptions","localeFirstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","fourthOfJanuary","localeWeekStartsOn","firstWeek","_locale_en_US_index_js__WEBPACK_IMPORTED_MODULE_1__","originalDate","timezoneOffset","firstWeekContainsDate","weekStartsOn","locale","_originalDate","_lib_format_longFormatters_index_js__WEBPACK_IMPORTED_MODULE_7__","firstCharacter","join","match","formattingTokensRegExp","map","_lib_format_formatters_index_js__WEBPACK_IMPORTED_MODULE_8__","substring","dirtyFormatStr","valuesArray","findKey","value","rest","key","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","result","count","full","medium","formats","defaultWidth","time","dateTime","formatLong","lastWeek","yesterday","today","tomorrow","nextWeek","narrow","abbreviated","wide","ordinalNumber","era","values","argumentCallback","day","dayPeriod","formattingValues","defaultFormattingWidth","localize","any","matchPattern","parsePattern","valueCallback","matchPatterns","defaultMatchWidth","parsePatterns","defaultParseWidth","code","formatDistance","_lib_formatDistance_index_js__WEBPACK_IMPORTED_MODULE_0__","_lib_formatLong_index_js__WEBPACK_IMPORTED_MODULE_1__","formatRelative","_lib_formatRelative_index_js__WEBPACK_IMPORTED_MODULE_2__","_lib_localize_index_js__WEBPACK_IMPORTED_MODULE_3__","_lib_match_index_js__WEBPACK_IMPORTED_MODULE_4__","dirtyAmount","_angular_core__WEBPACK_IMPORTED_MODULE_0__","events_r3","ctx_r4","getTimezoneOffsetString","getTimezoneOffset","hoursOffset","String","floor","abs","padStart","minutesOffset","padEnd","direction","DemoComponent","http","angular_calendar__WEBPACK_IMPORTED_MODULE_1__","Date","fetchEvents","getStart","date_fns__WEBPACK_IMPORTED_MODULE_2__","date_fns__WEBPACK_IMPORTED_MODULE_3__","date_fns__WEBPACK_IMPORTED_MODULE_4__","view","getEnd","date_fns__WEBPACK_IMPORTED_MODULE_5__","date_fns__WEBPACK_IMPORTED_MODULE_6__","date_fns__WEBPACK_IMPORTED_MODULE_7__","params","_angular_common_http__WEBPACK_IMPORTED_MODULE_8__","set","viewDate","events$","get","pipe","results","film","title","start","release_date","color","_demo_utils_colors__WEBPACK_IMPORTED_MODULE_11__","allDay","meta","events","activeDayIsOpen","length","event","window","open","id","selectors","decls","vars","consts","template","ctx","_r0","DemoModule","_angular_common__WEBPACK_IMPORTED_MODULE_1__","_angular_common_http__WEBPACK_IMPORTED_MODULE_2__","angular_calendar__WEBPACK_IMPORTED_MODULE_3__","provide","angular_calendar__WEBPACK_IMPORTED_MODULE_4__","useFactory","angular_calendar_date_adapters_date_fns__WEBPACK_IMPORTED_MODULE_5__","_demo_utils_module__WEBPACK_IMPORTED_MODULE_6__","_angular_router__WEBPACK_IMPORTED_MODULE_7__","path","component","_component__WEBPACK_IMPORTED_MODULE_8__","declarations","imports","exports"],"sources":["webpack:///node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack:///node_modules/date-fns/esm/_lib/format/formatters/index.js","webpack:///node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","webpack:///node_modules/date-fns/esm/_lib/format/longFormatters/index.js","webpack:///node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack:///node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","webpack:///node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack:///node_modules/date-fns/esm/_lib/getUTCWeek/index.js","webpack:///node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","webpack:///node_modules/date-fns/esm/_lib/protectedTokens/index.js","webpack:///node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack:///node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack:///node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","webpack:///node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack:///node_modules/date-fns/esm/format/index.js","webpack:///node_modules/date-fns/esm/isValid/index.js","webpack:///node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack:///node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack:///node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack:///node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/index.js","webpack:///node_modules/date-fns/esm/subMilliseconds/index.js","webpack:///projects/demos/app/demo-modules/async-events/template.html","webpack:///projects/demos/app/demo-modules/async-events/component.ts","webpack:///projects/demos/app/demo-modules/async-events/module.ts"],"sourcesContent":["export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import lightFormatters from \"../lightFormatters/index.js\";\nimport getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challange you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nimport buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","<mwl-demo-utils-calendar-header\n  [(view)]=\"view\"\n  [(viewDate)]=\"viewDate\"\n  (viewDateChange)=\"fetchEvents()\"\n  (viewChange)=\"fetchEvents()\"\n>\n</mwl-demo-utils-calendar-header>\n\n<ng-template #loading>\n  <div class=\"text-center\">\n    <i class=\"fas fa-spin fa-spinner fa-5x\"></i> <br />\n    Loading events...\n  </div>\n</ng-template>\n\n<div *ngIf=\"events$ | async; else loading; let events\">\n  <div [ngSwitch]=\"view\">\n    <mwl-calendar-month-view\n      *ngSwitchCase=\"'month'\"\n      [viewDate]=\"viewDate\"\n      [events]=\"events\"\n      [activeDayIsOpen]=\"activeDayIsOpen\"\n      (dayClicked)=\"dayClicked($event.day)\"\n      (eventClicked)=\"eventClicked($event.event)\"\n    >\n    </mwl-calendar-month-view>\n    <mwl-calendar-week-view\n      *ngSwitchCase=\"'week'\"\n      [viewDate]=\"viewDate\"\n      [events]=\"events\"\n      (eventClicked)=\"eventClicked($event.event)\"\n    >\n    </mwl-calendar-week-view>\n    <mwl-calendar-day-view\n      *ngSwitchCase=\"'day'\"\n      [viewDate]=\"viewDate\"\n      [events]=\"events\"\n      (eventClicked)=\"eventClicked($event.event)\"\n    >\n    </mwl-calendar-day-view>\n  </div>\n</div>\n","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport {\n  isSameMonth,\n  isSameDay,\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek,\n  startOfDay,\n  endOfDay,\n  format,\n} from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\ninterface Film {\n  id: number;\n  title: string;\n  release_date: string;\n}\n\nfunction getTimezoneOffsetString(date: Date): string {\n  const timezoneOffset = date.getTimezoneOffset();\n  const hoursOffset = String(\n    Math.floor(Math.abs(timezoneOffset / 60))\n  ).padStart(2, '0');\n  const minutesOffset = String(Math.abs(timezoneOffset % 60)).padEnd(2, '0');\n  const direction = timezoneOffset > 0 ? '-' : '+';\n\n  return `T00:00:00${direction}${hoursOffset}:${minutesOffset}`;\n}\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent implements OnInit {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events$: Observable<CalendarEvent<{ film: Film }>[]>;\n\n  activeDayIsOpen: boolean = false;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    this.fetchEvents();\n  }\n\n  fetchEvents(): void {\n    const getStart: any = {\n      month: startOfMonth,\n      week: startOfWeek,\n      day: startOfDay,\n    }[this.view];\n\n    const getEnd: any = {\n      month: endOfMonth,\n      week: endOfWeek,\n      day: endOfDay,\n    }[this.view];\n\n    const params = new HttpParams()\n      .set(\n        'primary_release_date.gte',\n        format(getStart(this.viewDate), 'yyyy-MM-dd')\n      )\n      .set(\n        'primary_release_date.lte',\n        format(getEnd(this.viewDate), 'yyyy-MM-dd')\n      )\n      .set('api_key', '0ec33936a68018857d727958dca1424f');\n\n    this.events$ = this.http\n      .get('https://api.themoviedb.org/3/discover/movie', { params })\n      .pipe(\n        map(({ results }: { results: Film[] }) => {\n          return results.map((film: Film) => {\n            return {\n              title: film.title,\n              start: new Date(\n                film.release_date + getTimezoneOffsetString(this.viewDate)\n              ),\n              color: colors.yellow,\n              allDay: true,\n              meta: {\n                film,\n              },\n            };\n          });\n        })\n      );\n  }\n\n  dayClicked({\n    date,\n    events,\n  }: {\n    date: Date;\n    events: CalendarEvent<{ film: Film }>[];\n  }): void {\n    if (isSameMonth(date, this.viewDate)) {\n      if (\n        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n        events.length === 0\n      ) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n        this.viewDate = date;\n      }\n    }\n  }\n\n  eventClicked(event: CalendarEvent<{ film: Film }>): void {\n    window.open(\n      `https://www.themoviedb.org/movie/${event.meta.film.id}`,\n      '_blank'\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { DemoUtilsModule } from '../demo-utils/module';\nimport { DemoComponent } from './component';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent],\n  exports: [DemoComponent],\n})\nexport class DemoModule {}\n"]}